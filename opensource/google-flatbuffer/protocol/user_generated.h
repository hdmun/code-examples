// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USER_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_USER_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

namespace protocol {

struct user;

struct user FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct userBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(user::VT_ID, id);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(user::VT_NAME, name);
  }
  explicit userBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  userBuilder &operator=(const userBuilder &);
  flatbuffers::Offset<user> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<user>(end);
    return o;
  }
};

inline flatbuffers::Offset<user> Createuser(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  userBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<user> CreateuserDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *name = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return protocol::Createuser(
      _fbb,
      id__,
      name__);
}

inline const protocol::user *Getuser(const void *buf) {
  return flatbuffers::GetRoot<protocol::user>(buf);
}

inline const protocol::user *GetSizePrefixeduser(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<protocol::user>(buf);
}

inline bool VerifyuserBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<protocol::user>(nullptr);
}

inline bool VerifySizePrefixeduserBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<protocol::user>(nullptr);
}

inline void FinishuserBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<protocol::user> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixeduserBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<protocol::user> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace protocol

#endif  // FLATBUFFERS_GENERATED_USER_PROTOCOL_H_
